/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

varying vec3 v3LightPos;

const float wl_r = 0.650;
const float wl_r4 = 0.17850625;
const float wl_g = 0.570;
const float wl_g4 = 0.10556001;
const float wl_b = 0.475;
const float wl_b4 = 0.050906640625;

const vec3 v3Wavelength = vec3(wl_r,wl_g,wl_b);
const vec3 v3Wavelength4= vec3(wl_r4,wl_g4,wl_b4);
const vec3 v3InvWavelength = 1.0 / v3Wavelength4;

const float fInnerRadius = 6371008.0;
const float fInnerRadius2 = fInnerRadius*fInnerRadius;

const float fOuterRadius = fInnerRadius * 1.025;
const float fOuterRadius2 = fOuterRadius*fOuterRadius;

const float fKrESun = 0.0025 * 15.0;
const float fKmESun = 0.0015 * 15.0;

const float fKr4PI = 0.0025*4.0*3.141592653589793;
const float fKm4PI = 0.0015*4.0*3.141592653589793;

const float fScale = 1.0 / (fOuterRadius - fInnerRadius);
const float fScaleDepth = 0.50;
const float fScaleOverScaleDepth = fScale/fScaleDepth;
const int nSamples = 2;
const float fSamples = 2.0;

varying vec3 v3Direction;

float scale(float fCos)
{
	float x = 1.0 - fCos;
	return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));
}

void main(void)
{
	gl_Position = ftransform();
	v3LightPos = normalize(gl_LightSource[0].position.xyz);
	vec3 v3CameraPos = vec3(gl_ModelViewMatrixInverse * vec4(0,0,0,1.0));
	float fCameraHeight = length(v3CameraPos);
	float fCameraHeight2 = fCameraHeight * fCameraHeight;

	// Get the ray from the camera to the vertex and its length
	vec3 v3Pos = gl_Vertex.xyz;
	vec3 v3Ray = v3Pos - v3CameraPos;
	float fFar = length(v3Ray);
	v3Ray /= fFar;

	// Calculate the closest intersection of the ray with the outer atmosphere
	float B = 2.0 * dot(v3CameraPos, v3Ray);
	float C = fCameraHeight2 - fOuterRadius2;
	float fDet = max(0.0, B*B - 4.0 * C);
	float fNear = 0.5 * (-B - sqrt(fDet));

	// Calculate the ray's starting position, then calculate its scattering offset
	vec3 v3Start = v3CameraPos + v3Ray * fNear;
	fFar -= fNear;
	float fStartAngle = dot(v3Ray, v3Start) / fOuterRadius;
	float fStartDepth = exp(-1.0 / fScaleDepth);
	float fStartOffset = fStartDepth*scale(fStartAngle);

	// Initialize the scattering loop variables
	float fSampleLength = fFar / fSamples;
	float fScaledLength = fSampleLength * fScale;
	vec3 v3SampleRay = v3Ray * fSampleLength;
	vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;

	// Now loop through the sample rays
	vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);
	for (int i=0; i<nSamples; i++) {
		float fHeight = length(v3SamplePoint);
		float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));
		float fLightAngle = dot(v3LightPos, v3SamplePoint) / fHeight;
		float fCameraAngle = dot(v3Ray, v3SamplePoint) / fHeight;
		float fScatter = (fStartOffset + fDepth*(scale(fLightAngle) - scale(fCameraAngle)));
		vec3 v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));
		v3FrontColor += v3Attenuate * (fDepth * fScaledLength);
		v3SamplePoint += v3SampleRay;
	}

	// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader
	gl_FrontSecondaryColor.rgb = v3FrontColor * fKmESun;
	gl_FrontColor.rgb = v3FrontColor * (v3InvWavelength * fKrESun);
	v3Direction = v3CameraPos - v3Pos;
}
