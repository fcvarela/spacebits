/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*
 *  terrain-fs.txt
 *  
 *
 *  Copyright 2008 Filipe Varela. All rights reserved.
 *
 */

varying vec4 diffuse;
varying vec3 specular;
varying float height,slope;
uniform sampler2D terrainDetailSoft;
uniform sampler2D terrainDetailHard;
uniform sampler2D reflectionTexture;
uniform sampler2D waterNormalMap;
uniform sampler2D waterDUDVMap;
uniform sampler2D colormap;
uniform vec2 waterCoordOffset;
varying vec2 fogTexCoords;


vec4 GenerateTerrainColor()
{
	float region1min = 0.0; // sand
	float region1max = 40.0;
	float region2min = 40.0; // grass 
	float region2max = 1200.0;
	float region3min = 1200.0; // snow
	float region3max = 9000.0;

	vec4 sand =  vec4(1.00,0.96,0.89,1.0);
	vec4 grass = vec4(0.47,0.63,0.45,1.0);
	vec4 dirt =  vec4(0.60,0.53,0.48,1.0);
	vec4 rock =  vec4(0.57,0.52,0.54,1.0);
	vec4 snow =  vec4(1.00,1.00,1.00,1.0);

	vec4 t_soft = texture2D(terrainDetailSoft, gl_TexCoord[0].st*16.0);
	vec4 t_hard = texture2D(terrainDetailHard, gl_TexCoord[0].st*16.0);
	vec4 color;
	
	//sand?
	if (height > region1min && height <= region1max)
		color = (slope < 0.1) ? sand*t_soft : dirt*t_hard;
	//grass?
	if (height > region2min && height <= region2max)
		color = (slope < 0.2) ? grass*t_soft : dirt*t_hard;
	//snow?
	if (height > region3min && height <= region3max)
		color = (slope < 0.5) ? snow*t_soft : dirt*t_hard;
	
	if (height <= 0.0) {
		// water
		vec2 dudvCoord = gl_TexCoord[0].st+waterCoordOffset;
		vec3 dudvColor = texture2D(waterDUDVMap, dudvCoord).rbg*2.0-1.0;
		dudvColor *= 0.019;
		vec2 coords = vec2(gl_FragCoord.x/1280.0, gl_FragCoord.y/800.0);
		vec4 t_refl = texture2D(reflectionTexture, coords+dudvColor.xz);
		color = mix(vec4(0.3,0.35,0.53,0.5),t_refl,0.5) + vec4(specular,1.0);
		color.a = 1.0;
	}
	return color;
}

void main()
{   
	if (gl_FogFragCoord > 30000.0)
		discard;
	vec4 color = GenerateTerrainColor() * (gl_LightSource[0].ambient + diffuse);
	float fog = (gl_Fog.end - gl_FogFragCoord) * gl_Fog.scale;
	fog = clamp(fog, 0.0, 1.0);
	vec4 fogColor = texture2D(colormap, fogTexCoords.st);
	fogColor.rgb *= fogColor.a;
	gl_FragColor = mix(fogColor, color, fog);
}
