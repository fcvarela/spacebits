/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*
 *  terrain-vs.txt
 *  
 *
 *  Copyright 2008 Filipe Varela. All rights reserved.
 *
 */

varying vec4 diffuse;
varying float height;
varying float slope;
uniform sampler2D waterNormalMap;
uniform vec2 sunLLAOffset;
uniform vec2 waterCoordOffset;
varying vec2 fogTexCoords;
varying vec3 specular;

void skyAndFogTexCoords()
{
    // X Axis - Time Of Day
    float coordX = ((sunLLAOffset.y/180.0) + 1.0)/2.0;
    // Y Axis - Time of day coloring according to vertex distance to Sun
    vec3 lpos = vec3(gl_LightSource[0].position);
    vec3 vpos = vec3(gl_ModelViewMatrix*gl_Vertex);
    float coordY = distance(lpos,vpos);
    // max distance is 60000;
    coordY = clamp(coordY/60000.0,0.0,1.0);
    fogTexCoords = vec2(coordX,coordY);
}

void main()
{
    gl_TexCoord[0] = gl_MultiTexCoord0;

    // get vertex height for tex selection
    height = gl_Vertex.y;
    vec3 v_normal = gl_Normal;
    if (height <= 0.0) {
	/* options; rgb,rbg,gbr,grb,bgr,brg */
	vec3 l_normal = normalize(texture2D(waterNormalMap, gl_TexCoord[0].st+waterCoordOffset).rbg)*2.0-1.0;
	v_normal = vec3(-l_normal.x,2.0*l_normal.y,-l_normal.z);
    }

    // lighting etc
    vec3 ecPosition = vec3(gl_ModelViewMatrix * gl_Vertex);
    vec3 normal = normalize(gl_NormalMatrix * v_normal);
    vec3 lightVec = normalize(vec3(gl_LightSource[0].position) - ecPosition);
    vec3 reflectVec = reflect(-lightVec,normal);
    vec3 viewVec = normalize(-ecPosition);

    
    // diffuse 
    float nxDir = max(dot(normal,lightVec), 0.0);
    diffuse = gl_LightSource[0].diffuse * nxDir;
    slope = abs(dot(vec3(0.0,0.0,1.0), gl_Normal));

    // specular
    float spec = clamp(dot(reflectVec,viewVec), 0.0, 1.0);
    spec = pow(spec, 8.0);
    specular = vec3(spec)*vec3(1.0,0.941,0.898);

    gl_FogFragCoord = abs(ecPosition.z);
    skyAndFogTexCoords();

    // the usual stuff
    gl_Position = ftransform();
    
}
